[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "blog-writer-sdk"
version = "0.1.0"
description = "A powerful Python SDK for AI-driven blog writing with advanced SEO optimization"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
keywords = ["blog", "writing", "seo", "content", "ai", "sdk"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Text Processing :: Markup :: HTML",
]

dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "httpx>=0.25.0",
    "python-multipart>=0.0.6",
    "supabase>=2.3.0",
    "python-dotenv>=1.0.0",
    "beautifulsoup4>=4.12.0",
    "markdown>=3.5.0",
    "python-frontmatter>=1.0.0",
    "textstat>=0.7.0",
    "yake>=0.4.8",
    "rich>=13.7.0",
    "typer>=0.9.0",
    # AI Provider Dependencies
    "openai>=1.12.0",
    "anthropic>=0.18.0",
    # Additional utilities for AI
    "asyncio-throttle>=1.0.2",
    "tenacity>=8.2.0",
    # LiteLLM removed - using direct AI provider integrations
    "pyyaml>=6.0.0",
    # V1.0 Enterprise Features
    "redis>=5.0.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",  # For testing FastAPI endpoints
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
]
ai = [
    "google-generativeai>=0.3.0",
    "cohere>=4.37.0",
    "huggingface-hub>=0.19.0",
    "transformers>=4.36.0",
]
nlp = [
    "spacy>=3.7.0",
    "nltk>=3.8.0",
]
advanced = [
    "pandas>=2.1.0",
    "numpy>=1.24.0",
    "matplotlib>=3.7.0",
    "plotly>=5.17.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/blog-writer-sdk"
Repository = "https://github.com/yourusername/blog-writer-sdk.git"
Documentation = "https://blog-writer-sdk.readthedocs.io"
"Bug Tracker" = "https://github.com/yourusername/blog-writer-sdk/issues"

[project.scripts]
blog-writer = "blog_writer_sdk.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["src/blog_writer_sdk"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["blog_writer_sdk"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "yake.*",
    "textstat.*",
    "frontmatter.*",
    "openai.*",
    "anthropic.*",
    "google.generativeai.*",
    "cohere.*",
    "huggingface_hub.*",
    "transformers.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=src/blog_writer_sdk",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
    "-v",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
